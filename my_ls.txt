void _ls(const char *dir, int op_a, int op_l) {
    struct dirent *d;
    DIR *dh = opendir(dir);
    while((d = readdir(dh)) != NULL) {
        if(!op_a && d->d_name[0] == '.') continue;
        printf("%s", d->d_name);
        if(op_l) printf("\n");
    }
    if(!op_l) printf("\n");
}

int main(int argc, const char *argv[]) {
    if(argc == 1) {
        _ls(".", 0, 0);
    } else if(argc == 2) {
        if(argv[1][0] == '-') {
            int op_a = 0, op_l = 0;
            char *p = (char *)(argv[1]+1);
            while(*p) {
                if(*p == 'a') op_a = 1;
                else if(*p == 'l') op_l = 1;
                p++;
            }
            _ls(".", op_a, op_l);
        }else{
            _ls(argv[1], 0, 0);
        }
    }
}






















                                                                                                                        int main(int argc, const char *argv[]) {
    if(argc == 1) {
        _ls(".", 0, 0);
    } else if(argc == 2) {
        if(argv[1][0] == '-') {
            int op_a = 0, op_l = 0;
            char *p = (char *)(argv[1]+1);
            while(*p) {
                if(*p == 'a') op_a = 1;
                else if(*p == 'l') op_l = 1;
                p++;
            }
            _ls(".", op_a, op_l);
        }else{
            _ls(argv[1], 0, 0);
        }
    } else if(argc == 3) {
        if(argv[1][0] != '-');
    }
    int op_a = 0, op_l = 0;                                                                                            \
     char *p = (char *)(argv[1]+1);                                                                                    \
      while(*p) {
        if(*p == 'a') op_a = 1;
        else if(*p == 'l') op_l = 1;
        p++;
    }
        _ls(argv[2], op_a, op_l);
}
















#include <dirent.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void _ls(const char *dir, int op_a, int op_1) {
    struct dirent *d;
    DIR *dh = opendir(dir);
    while((d = readdir(dh)) != NULL) {
        if(!op_a && d->d_name[0] == '.') continue;

        printf("%s", d->d_name);
       

 if(op_1) printf("\n");
    }
    if(!op_1) printf("\n");
}

int main(int argc, const char *argv[]) {
    if(argc == 1) {
        _ls(".", 0, 0);
    } else if(argc == 2) {
        if(argv[1][0] == '-') {
            int op_a = 0, op_1 = 0;
            char *p = (char *)(argv[1]+1);
            while(*p) {
                if(*p == 'a') op_a = 1;
                else if(*p == '1') op_1 = 1;
                p++;
            }
            _ls(".", op_a, op_1);
        }else{
            _ls(argv[1], 0, 0);
        }
    } else if(argc == 3) {

        int op_a = 0, op_1 = 0;
        char *p = (char *)(argv[1]+1);
        while(*p) {

            if(*p == 'a') op_a = 1;
            else if(*p == '1') op_1 = 1;
            p++;
        }
        _ls(argv[2], op_a, op_1);
        return 0;
    }
}








AFFICHE QUE LES DOSSIERS CACHER


#include <dirent.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void my_putchar(char c)
{
    write(1, &c, 1);
}

int my_putstr(char *str)
{
    int index;

    index = 0;
    while (str[index] != '\0')
        {
            my_putchar(str[index]);                                                                                                                                                     index++;
        }
}

void _ls(const char *dir, int op_a, int op_1) {
    struct dirent *d;
    DIR *dh = opendir(dir);


    while ((d = readdir(dh)) != NULL) {
        if (!op_a && d->d_name[0] == '.') {
            my_putstr(d->d_name);
            my_putchar('\n');
        }
    }
    if (closedir(dh) == -1) {
        exit(-1);

        return 0;
    }
}

int main(int argc, const char *argv[]) {
    if(argc == 1) {
        _ls(".", 0, 0);
    } else if(argc == 2) {
        if(argv[1][0] == '-') {
            int op_a = 0, op_1 = 0;
            char *p = (char *)(argv[1]+1);
            while(*p) {
                if(*p == 'a') op_a = 1;
                else if(*p == '1') op_1 = 1;
                p++;
            }
            _ls(".", op_a, op_1);
        }else{
            _ls(argv[1], 0, 0);
        }
    } else if(argc == 3) {

        int op_a = 0, op_1 = 0;                                                                                                                                                     char *p = (char *)(argv[1]+1);
        while(*p) {                                                                                                                                                         
            if(*p == 'a') op_a = 1;
            else if(*p == '1') op_1 = 1;
            p++;
        }
        _ls(argv[2], op_a, op_1);
        return 0;
    }
}

















FONCTION ls/ls-a/ls-1/juste manque espace et ordre

#include <dirent.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

void my_putchar(char c)
{
    write(1, &c, 1);
}

int my_putstr(char *str)
{
    int index;

    index = 0; 
 while (str[index] != '\0')
        {
            my_putchar(str[index]);
            index++;
        }
}

void _ls(const char *dir, int op_a, int op_1) {
    struct dirent *d;
    DIR *dh = opendir(dir);

    while ((d = readdir(dh)) != NULL) {
        if (!op_a && d->d_name[0] == '.')continue; {
            my_putstr(d->d_name);
            if(op_1) my_putchar('\n'); /*saut de ligne apres la fonction ls-1*/
        }
    }
    if(op_a) my_putchar('\n');/*saut de ligne apres la fonction ls-a*/         
}

int main(int argc, const char *argv[]) {
    if(argc == 1) {
        _ls(".", 0, 0);
        my_putchar('\n'); /*Saut a la ligne pour le ./a.out*/
    } else if(argc == 2) {
        if(argv[1][0] == '-') {
            int op_a = 0, op_1 = 0;
            char *p = (char *)(argv[1]+1);
            while(*p) {
                if(*p == 'a') op_a = 1;
                else if(*p == '1') op_1 = 1;
                p++;
            }
            _ls(".", op_a, op_1);
        }                                                                                                                                                        }
}
